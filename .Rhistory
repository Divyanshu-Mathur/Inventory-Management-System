print(b)
a<-readline(prompt = "Enter your age = ")
print(b)
18
a<-readline(prompt = "Enter your age = ")
b<-as.integer(a)
print(b)
a<-readline(prompt = "Enter your age = ");
print(b)
a<-readline(prompt = "Enter your age = ");
print(b)
a<-readline(prompt = "Enter your age = \n");
print(b)
paste0("aa","bbb","ccc")
paste("aa","bbb","ccc")
paste("aa","bbb","ccc",sep = "__")
paste("aa","bbb","ccc",sep = "")
sqrt(4)
sin(45)
log(5)
a<-"Hello"
toupper(a)
tolower(a)
b<-c("abcs","abfd","abc","cba")
pat<-"^abc"
grep(pat,b)
seq(1,10)
seq(1,10,length(10))
seq(1,10,length(20))
seq(1,10,length=20
)
help("repeat")
sqrt(4)
sin(45)
log(5)
a<-"Hello"
toupper(a)
tolower(a)
b<-c("abcs","abfd","abc","cba")
pat<-"^abc"
grep(pat,b)
seq(1,5,length=15)
l<-list(c('a','b','c'),c(97,86,90))
l
names(l)=c("names","marks")
l["names"]
l["marks"]
l[1]
a<-list(4:9)
b<-list(9:14)
c<-a+b
a<-c(4:9)
a
b<-b(9:14)
b<-c(9:14)
b
c<-a+b
c
a<-list(4:9)
b<-list(9:14)
c<-unlist(a)
d<-unlist(b)
c+d
rep(c(1,2,3),4)
rep(c(1,2,3),length=6)
rep(c(1,2,3),length=5)
rep(c(1,2,3),c(1,2,1))
rep(c(1,2,3),each=2)
x<--10:10
x
any(x>6)
all(x>-11)
all(x>7)
v1<-c(1,2,3)
v2<-c(4,5,6,7,8)
row<-c("r1","r2","r3")
col<-c("c1","c2","c3","c4")
mat<-c("m1","m2","m3","m4")
v3<-array(c(v1,v2),dim =c(3,4,2) ,dimnames =c(row,col,mat) )
v1<-c(1,2,3)
v2<-c(4,5,6,7,8)
row<-c("r1","r2","r3")
col<-c("c1","c2","c3","c4")
mat<-c("m1","m2","m3","m4")
v3<-array(c(v1,v2),dim =c(3,4,2) ,dimnames<-list(row,col,mat) )
v1<-c(1,2,3)
v2<-c(4,5,6,7,8)
row<-c("r1","r2","r3")
col<-c("c1","c2","c3","c4")
mat<-c("m1","m2","m3","m4")
v3<-array(c(v1,v2),dim =c(3,4,4) ,dimnames<-list(row,col,mat) )
v3
v1<-c(1,2,3)
v2<-c(4,5,6,7,8)
row<-c("r1","r2","r3")
col<-c("c1","c2","c3","c4")
mat<-c("m1","m2","m3","m4")
v3<-array(c(v1,v2),dim =c(3,4,4) ,dimnames<-list(row,col,mat) )
v3
print(v3[3,,2])
print(v3[3,2,2])
m=matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3,byrow = TRUE)
m
m=matrix(c(1,2,3,4,5,6,7,8,9,10),nrow = 5,ncol =2 ,byrow = TRUE)
m
x<-c(12,65,77,97)
l<-c('a','b','c','d')
pie(x,l,main = "Alphabets",col=c("orange","red","blue","purple"))
legend("topright",l,cex = 0.5,fill = c("orange","red","blue","purple"))
install.packages("plotrix")
library(plotrix)
x<-c(12,65,77,97)
p<- round(x / sum(x) * 100)
pie(x,l,main = "Alphabets",col=c("orange","red","blue","purple"))
legend("topright",c("A","B","C","D"),cex = 0.5,fill = c("orange","red","blue","purple"))
x<-c(12,65,77,97)
p<- round(x / sum(x) * 100)
pie(x,p,main = "Alphabets",col=c("orange","red","blue","purple"))
legend("topright",c("A","B","C","D"),cex = 0.5,fill = c("orange","red","blue","purple"))
x<-c(12,65,77,97)
p<- paste(round(x / sum(x) * 100),"%")
pie(x,p,main = "Alphabets",col=c("orange","red","blue","purple"))
legend("topright",c("A","B","C","D"),cex = 0.5,fill = c("orange","red","blue","purple"))
x<-c(10,50,90,76,89,45)
a<-c("Jan","Feb","Mar","Apr","May","June")
barplot(x,xlab = "Month",ylab = "Revenue",names.arg =a,col = "orange",border = "brown",main = "Spend" )
m<-c("j","f","m")
d<-c("n","e","w")
m<-matrix(c(56,76,98,34,56,85,22,97,65),nrow = 3,ncol = 3)
View(m)
barplot(m,names.arg = m,col = c("yellow","orange","red"),xlab = "month",ylab = "revenue",
main = "Expenditure")
barplot(m,names.arg = m,col = c("yellow","orange","red"),xlab = "month",ylab = "revenue",
main = "Expenditure")
m<-c("j","f","m")
d<-c("n","e","w")
m<-matrix(c(56,76,98,34,56,85,22,97,65),nrow = 3,ncol = 3)
barplot(m,names.arg = m,col = c("yellow","orange","red"),xlab = "month",ylab = "revenue",main = "Expenditure")
m<-c("j","f","m")
d<-c("n","e","w")
v<-matrix(c(56,76,98,34,56,85,22,97,65),nrow = 3,ncol = 3)
barplot(v,names.arg = m,col = c("yellow","orange","red"),xlab = "month",ylab = "revenue",main = "Expenditure")
legend("topright",d,col =c("yellow","orange","red") )
legend("topright",d,fill =c("yellow","orange","red") )
View(v)
a <- 56
a
as.datatype_name(a)
a.typeof()
typeof(a)
b <- as.complex(a)
b
typeof(b)
10^2
10%/%2
10/5
arr <- c(1,2,3,4,5,6,7)
if (1 %in% arr)
{}
a<-15
a
library(gapminder)
library(ggplot2)
library(dplyr)
data<-gapminder
data_2 <-filter(data,country=="Afghanistan")
barplot(data_2$lifeExp,names.arg = data_2$year,col = rainbow(length(unique(data_2$year))))
a<-ggplot(data_2,aes(x=factor(year) ,y=pop))+geom_bar(stat = "identity",fill=rainbow(length(unique(data_2$year))))
ggplotly(a, tooltip = "text")
for (i in 1:10)
{
print(i)
}
a <- as.numeric(readline(prompt = "Enter a number"))
a <- as.numeric(readline(prompt = "Enter a number"))
a <- as.numeric(readline(prompt = "Enter a number"))
a <- as.numeric(readline(prompt = "Enter a number"))
{
print(i)
}
for (i in 1:a)
a <- as.numeric(readline(prompt = "Enter a number"))
a <- as.numeric(readline(prompt = "Enter a number"))
for (i in 1:a)
{
print(i)
}
a<- 15
print(a,"value")
paste(a,"value")
a <- as.numeric(readline(prompt = "Enter a number : "))
for (i in 1:10)
{
print(paste(a," x ",i," = ",a*i))
}
a<- 10
repeat{
print(a)
a+=1
a<- 10
repeat{
print(a)
a=a+1
if(a>=15)
{
break
}
}
while(a<20){
print(a)
a<- a+1
}
newfactorial <- function(x){
f <- 1
for (i in 1:x){
f<- f*i
}
return(f)
}
newfactorial(4)
newfactorial(5)
allsum <- function(x){
s <- 0
for (i in x)
{
s<- s+i
}
return(s)
}
a<- c(1,2,3,4,4)
allsum(a)
newfactorial <- function(x=4){
f <- 1
for (i in 1:x){
f<- f*i
}
return(f)
}
newfactorial()
newfactorial(5)
name <- readline(prompt = "Enter your name : ")
age <- as.numeric(readline(prompt = "Enter your age : "))
paste("Hello",name,"you are" ,age, "years old!")
paste0("Hello",name,"you are" ,age, "years old!")
findsqrt <- function(x){
if(x<=0){
paste("Invalid")
}else{
return(sqrt(x))
}
}
findsqrt(9)
findsqrt(-9)
findsqrt <- function(x){
if(x<=0){
#Invalid number
paste("Invalid")
}else{
return(sqrt(x))
}
}
a <- 10
b <- 18
a,b <- b,a
num <- 1:100
even <- num[num %%2 ==0]
print(even)
prime <- function(a){
if (a <= 1){
return(FALSE)
}else{
if (a==2){
return(TRUE)
}else{
for (i in a/2){
if(a%%i == 0){
return(FALSE)
}
}
return(TRUE)
}
}
}
prime(-6)
prime(9)
prime(123)
prime(23)
prime <- function(a){
if (a <= 1){
return(FALSE)
}else{
if (a==2){
return(TRUE)
}else{
for (i in 2:a/2){
if(a%%i == 0){
return(FALSE)
}
}
return(TRUE)
}
}
}
prime(-6)
prime(9)
prime(23)
prime <- function(a){
if (a <= 1){
return(FALSE)
}else{
if (a==2){
return(TRUE)
}else{
for (i in 2:(a/2){
prime <- function(a){
if (a <= 1){
return(FALSE)
}else{
if (a==2){
return(TRUE)
}else{
for (i in 2:(a/2)){
if(a%%i == 0){
return(FALSE)
}
}
return(TRUE)
}
}
}
prime(-6)
prime(9)
prime(23)
library(tidyr)
library(tidyr)
for (i in 1:10)
{
print(paste(a," x ",i," = ",a*i))
}
a<- 10
repeat{
print(a)
a=a+1
if(a>=15)
{
break
}
}
while(a<20){
print(a)
a<- a+1
}
newfactorial <- function(x=4){
f <- 1
for (i in 1:x){
f<- f*i
}
return(f)
}
allsum <- function(x){
s <- 0
for (i in x)
{
s<- s+i
}
return(s)
}
newfactorial()
newfactorial(5)
a<- c(1,2,3,4,4)
allsum(a)
findsqrt <- function(x){
if(x<=0){
#Invalid number
paste("Invalid")
}else{
return(sqrt(x))
}
}
findsqrt(-9)
a <- 10
b <- 18
a,b <- b,a
for (i in 1:10)
{
print(paste(a," x ",i," = ",a*i))
}
a<- 10
repeat{
print(a)
a=a+1
if(a>=15)
{
break
}
}
while(a<20){
print(a)
a<- a+1
}
newfactorial <- function(x=4){
f <- 1
for (i in 1:x){
f<- f*i
}
return(f)
}
allsum <- function(x){
s <- 0
for (i in x)
{
s<- s+i
}
return(s)
}
newfactorial()
newfactorial(5)
a<- c(1,2,3,4,4)
allsum(a)
findsqrt <- function(x){
if(x<=0){
#Invalid number
paste("Invalid")
}else{
return(sqrt(x))
}
}
findsqrt(-9)
num <- 1:100
even <- num[num %%2 ==0]
print(even)
prime <- function(a){
if (a <= 1){
return(FALSE)
}else{
if (a==2){
return(TRUE)
}else{
for (i in 2:(a/2)){
if(a%%i == 0){
return(FALSE)
}
}
return(TRUE)
}
}
}
prime(-6)
prime(9)
prime(23)
a <- c(1,2,3,4,5,6,7)
typeof(a)
class(a)
seq(1,3,by=0.5)
seq(1,3,length.out=10)
marks<- c('a'=10,'b'=15,'c'=19)
marks
c(1,1,1,1,'a')
rep(c(1,2,4),time=5)
x<- 1:10
x
any(x>15)
all(x<15)
vec <- 1:10
vec[c(2,4,6)]
vec[c(2,4,8)]
vec[c(2,5)]=10
vec
vec[vec %%2 == 0]
vec <- vec[-2]
vec
my_list <- list(numbers = c(1, 2, 3), characters = c("a", "b", "c"), logical = TRUE)
print(my_list)
num_list <- list(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9))
sums <- lapply(num_list, sum)
print(sums)
multiplied <- lapply(num_list, function(x) x * 2)
print(multiplied)
any(grepl("xlsx",install.packages()))
install.packages("xlsx")
any(grepl("xlsx",installed.packages()))
getwd()
install.packages("xlsx")
library("xlsx")
plumber::plumb(file='D:/Data Science/Inventory Management System/api.R')$run()
getwd()
setwd("D:\\Data Science\\Inventory Management System")
plumber::plumb(file='api.R')$run()
library("plumber")
api <- plumb("api.R")
api$run(port=8000)
#* Alert for low stock
#*  @get /inventory/low_stock
function(){
query <- "SELECT * FROM inventory WHERE qty < min_stock;"
result <- dbGetQuery(con,query)
return(result)
}
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
plumb(file='api.R')$run()
library("plumber")
api <- plumb("api.R")
api$run(port=8000)
plumb(file='api.R')$run()
library("plumber")
api <- plumb("api.R")
api$run(port=8000)
library("plumber")
api <- plumb("api.R")
api$run(port=8000)
